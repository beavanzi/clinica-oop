/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package clinic.view;

import clinic.view.docPages.UpdateMedicalRecord;
import clinic.view.docPages.UpdateAditionalPatientDataPage;
import clinic.view.docPages.UpdatePatientRecordPage;
import clinic.view.secPages.UpdateAppointmentPage;
import clinic.view.secPages.UpdatePatientPage;
import clinic.view.secPages.CreatePatientPage;
import clinic.view.secPages.CreateAppointmentPage;
import clinic.view.docPages.CreatePatientRecordPage;
import clinic.view.docPages.CreateAditionalPatientDataPage;
import clinic.view.docPages.CreateMedicalRecordPage;
import clinic.external.Patient;
import clinic.employees.Doctor;
import javax.swing.JOptionPane;

/**
 *
 * @author sarahanduca
 */
public class MainPage extends javax.swing.JFrame {
    private Doctor doc;
    /**
     * Creates new form MainPage
     */
    public MainPage() {
        initComponents();
        this.doc = new Doctor();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane1 = new javax.swing.JDesktopPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        secretarioMenu = new javax.swing.JMenu();
        criarPacienteEscolhaMenu = new javax.swing.JMenuItem();
        atualizarPacienteEscolhaMenu = new javax.swing.JMenuItem();
        encontrarPacienteEscolhaMenu = new javax.swing.JMenuItem();
        removerPacienteEscolhaMenu = new javax.swing.JMenuItem();
        criarAgendamentoEscolhaMenu = new javax.swing.JMenuItem();
        atualizarAgendamentoEscolhaMenu = new javax.swing.JMenuItem();
        relatorioAgendamentoEscolhaMenu = new javax.swing.JMenuItem();
        cancelarAgendamentoEscolhaMenu = new javax.swing.JMenuItem();
        medicoMenu = new javax.swing.JMenu();
        criarDadoAdicionalEscolhaMenu = new javax.swing.JMenuItem();
        atualizarDadoAdicionalEscolhaMenu = new javax.swing.JMenuItem();
        removerDadoAdcicionalEscolhaMenu = new javax.swing.JMenuItem();
        criarRelatorioMedicoEscolhaMenu = new javax.swing.JMenuItem();
        atualizarRelatorioMedicoEscolhaMenu = new javax.swing.JMenuItem();
        removerRelatorioMedicoEscolhaMenu = new javax.swing.JMenuItem();
        criarPronturarioEscolhaMenu = new javax.swing.JMenuItem();
        atualizarProntuarioEscolhaMenu = new javax.swing.JMenuItem();
        removerProntuarioEscolhaMenu = new javax.swing.JMenuItem();
        agendamentoMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 975, Short.MAX_VALUE)
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 504, Short.MAX_VALUE)
        );

        secretarioMenu.setText("Secretário");

        criarPacienteEscolhaMenu.setText("Criar Paciente");
        criarPacienteEscolhaMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                criarPacienteEscolhaMenuActionPerformed(evt);
            }
        });
        secretarioMenu.add(criarPacienteEscolhaMenu);

        atualizarPacienteEscolhaMenu.setText("Atualizar Paciente");
        atualizarPacienteEscolhaMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atualizarPacienteEscolhaMenuActionPerformed(evt);
            }
        });
        secretarioMenu.add(atualizarPacienteEscolhaMenu);

        encontrarPacienteEscolhaMenu.setText("Encontrar Paciente Pelo Nome");
        encontrarPacienteEscolhaMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encontrarPacienteEscolhaMenuActionPerformed(evt);
            }
        });
        secretarioMenu.add(encontrarPacienteEscolhaMenu);

        removerPacienteEscolhaMenu.setText("Remover Paciente");
        removerPacienteEscolhaMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerPacienteEscolhaMenuActionPerformed(evt);
            }
        });
        secretarioMenu.add(removerPacienteEscolhaMenu);

        criarAgendamentoEscolhaMenu.setText("Criar Agendamento");
        criarAgendamentoEscolhaMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                criarAgendamentoEscolhaMenuActionPerformed(evt);
            }
        });
        secretarioMenu.add(criarAgendamentoEscolhaMenu);

        atualizarAgendamentoEscolhaMenu.setText("Atualizar Agendamento");
        atualizarAgendamentoEscolhaMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atualizarAgendamentoEscolhaMenuActionPerformed(evt);
            }
        });
        secretarioMenu.add(atualizarAgendamentoEscolhaMenu);

        relatorioAgendamentoEscolhaMenu.setText("Gerar Relatório de Agendamentos");
        secretarioMenu.add(relatorioAgendamentoEscolhaMenu);

        cancelarAgendamentoEscolhaMenu.setText("Cancelar Agendamento");
        secretarioMenu.add(cancelarAgendamentoEscolhaMenu);

        jMenuBar1.add(secretarioMenu);

        medicoMenu.setText("Médico");

        criarDadoAdicionalEscolhaMenu.setText("Criar Dado Adicional Paciente");
        criarDadoAdicionalEscolhaMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                criarDadoAdicionalEscolhaMenuActionPerformed(evt);
            }
        });
        medicoMenu.add(criarDadoAdicionalEscolhaMenu);

        atualizarDadoAdicionalEscolhaMenu.setText("Atualizar Dado Adicional Paciente");
        atualizarDadoAdicionalEscolhaMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atualizarDadoAdicionalEscolhaMenuActionPerformed(evt);
            }
        });
        medicoMenu.add(atualizarDadoAdicionalEscolhaMenu);

        removerDadoAdcicionalEscolhaMenu.setText("Remover Dado Adicional Paciente");
        removerDadoAdcicionalEscolhaMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerDadoAdcicionalEscolhaMenuActionPerformed(evt);
            }
        });
        medicoMenu.add(removerDadoAdcicionalEscolhaMenu);

        criarRelatorioMedicoEscolhaMenu.setText("Criar Relatório Médico");
        criarRelatorioMedicoEscolhaMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                criarRelatorioMedicoEscolhaMenuActionPerformed(evt);
            }
        });
        medicoMenu.add(criarRelatorioMedicoEscolhaMenu);

        atualizarRelatorioMedicoEscolhaMenu.setText("Atualizar Relatório Médico");
        atualizarRelatorioMedicoEscolhaMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atualizarRelatorioMedicoEscolhaMenuActionPerformed(evt);
            }
        });
        medicoMenu.add(atualizarRelatorioMedicoEscolhaMenu);

        removerRelatorioMedicoEscolhaMenu.setText("Remover Relatório Médico");
        removerRelatorioMedicoEscolhaMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerRelatorioMedicoEscolhaMenuActionPerformed(evt);
            }
        });
        medicoMenu.add(removerRelatorioMedicoEscolhaMenu);

        criarPronturarioEscolhaMenu.setText("Criar Prontuário");
        criarPronturarioEscolhaMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                criarPronturarioEscolhaMenuActionPerformed(evt);
            }
        });
        medicoMenu.add(criarPronturarioEscolhaMenu);

        atualizarProntuarioEscolhaMenu.setText("Atualizar Prontuário");
        atualizarProntuarioEscolhaMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atualizarProntuarioEscolhaMenuActionPerformed(evt);
            }
        });
        medicoMenu.add(atualizarProntuarioEscolhaMenu);

        removerProntuarioEscolhaMenu.setText("Remover Prontuário");
        removerProntuarioEscolhaMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerProntuarioEscolhaMenuActionPerformed(evt);
            }
        });
        medicoMenu.add(removerProntuarioEscolhaMenu);

        jMenuBar1.add(medicoMenu);

        agendamentoMenu.setText("Agendamento");
        jMenuBar1.add(agendamentoMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void criarPacienteEscolhaMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_criarPacienteEscolhaMenuActionPerformed
        // Criar Paciente
        CreatePatientPage patientPage = new CreatePatientPage();
        jDesktopPane1.add(patientPage);
        patientPage.setVisible(true);
        
    }//GEN-LAST:event_criarPacienteEscolhaMenuActionPerformed

    private void criarDadoAdicionalEscolhaMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_criarDadoAdicionalEscolhaMenuActionPerformed
        // criar dado adicional
        String patientName = JOptionPane.showInputDialog(rootPane, "Nome do Paciente para ser atualizado:");
        if(patientName.equals("Roberto")){
            CreateAditionalPatientDataPage createAdPatientData = new CreateAditionalPatientDataPage();
            jDesktopPane1.add(createAdPatientData);
            createAdPatientData.setVisible(true);
        }else{
            JOptionPane.showMessageDialog(rootPane, "Paciente não encontrado", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_criarDadoAdicionalEscolhaMenuActionPerformed

    private void atualizarPacienteEscolhaMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atualizarPacienteEscolhaMenuActionPerformed
        // Atualizar Paciente pelo nome:
        String patientName = JOptionPane.showInputDialog(rootPane, "Nome do Paciente para ser atualizado:");
        if(patientName.equals("Roberto")){
            UpdatePatientPage updatePatientPage = new UpdatePatientPage();
            jDesktopPane1.add(updatePatientPage);
            updatePatientPage.setVisible(true);
        }else{
            JOptionPane.showMessageDialog(rootPane, "Paciente não encontrado", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_atualizarPacienteEscolhaMenuActionPerformed

    private void removerPacienteEscolhaMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerPacienteEscolhaMenuActionPerformed
        // Remover Paciente pelo e-mail:
        
        String patientName = JOptionPane.showInputDialog(rootPane, "Nome do Paciente para ser removido:");
        if(patientName.equals("Roberto")){
             JOptionPane.showMessageDialog(rootPane, "Paciente Removido com sucesso", "Remoção", JOptionPane.INFORMATION_MESSAGE);
        }else{
            JOptionPane.showMessageDialog(rootPane, "Paciente não encontrado", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_removerPacienteEscolhaMenuActionPerformed

    private void encontrarPacienteEscolhaMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encontrarPacienteEscolhaMenuActionPerformed
        // Encontrar Paciente pelo nome:
        String patientName = JOptionPane.showInputDialog(rootPane, "Nome do Paciente para ser encontrado:");
        if(patientName.equals("Roberto")){
             //displaypacienteecontrado
        }else{
            JOptionPane.showMessageDialog(rootPane, "Paciente não encontrado", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_encontrarPacienteEscolhaMenuActionPerformed

    private void criarAgendamentoEscolhaMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_criarAgendamentoEscolhaMenuActionPerformed
        // criar atendimento
        CreateAppointmentPage appointmentPage = new CreateAppointmentPage();
        jDesktopPane1.add(appointmentPage);
        appointmentPage.setVisible(true);
    }//GEN-LAST:event_criarAgendamentoEscolhaMenuActionPerformed

    private void atualizarAgendamentoEscolhaMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atualizarAgendamentoEscolhaMenuActionPerformed
        // atualizar atendimento
        String patientName = JOptionPane.showInputDialog(rootPane, "Nome do Paciente para ser atualizado:");
        if(patientName.equals("Roberto")){
            UpdateAppointmentPage updateAppointment = new UpdateAppointmentPage();
            jDesktopPane1.add(updateAppointment);
            updateAppointment.setVisible(true);
        }else{
            JOptionPane.showMessageDialog(rootPane, "Paciente não encontrado", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_atualizarAgendamentoEscolhaMenuActionPerformed

    private void atualizarDadoAdicionalEscolhaMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atualizarDadoAdicionalEscolhaMenuActionPerformed
        // atualizar dado adicional
        String patientName = JOptionPane.showInputDialog(rootPane, "Nome do Paciente para ser removido:");
        if(patientName.equals("Roberto")){
            UpdateAditionalPatientDataPage updateAditionalDataPage = new UpdateAditionalPatientDataPage();
            jDesktopPane1.add(updateAditionalDataPage);
            updateAditionalDataPage.setVisible(true);
        }else{
            JOptionPane.showMessageDialog(rootPane, "Paciente não encontrado", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_atualizarDadoAdicionalEscolhaMenuActionPerformed

    private void removerDadoAdcicionalEscolhaMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerDadoAdcicionalEscolhaMenuActionPerformed
        // remover dado adicional
        String patientName = JOptionPane.showInputDialog(rootPane, "Nome do Paciente para ser removido:");
        if(patientName.equals("Roberto")){
             JOptionPane.showMessageDialog(rootPane, "Dado Adicional Removido com sucesso", "Remoção", JOptionPane.INFORMATION_MESSAGE);
        }else{
            JOptionPane.showMessageDialog(rootPane, "Paciente não encontrado", "Erro", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_removerDadoAdcicionalEscolhaMenuActionPerformed

    private void criarRelatorioMedicoEscolhaMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_criarRelatorioMedicoEscolhaMenuActionPerformed
        // relatório médico
        CreateMedicalRecordPage createMedicalRecord = new CreateMedicalRecordPage();
        jDesktopPane1.add(createMedicalRecord);
        createMedicalRecord.setVisible(true);
    }//GEN-LAST:event_criarRelatorioMedicoEscolhaMenuActionPerformed

    private void atualizarRelatorioMedicoEscolhaMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atualizarRelatorioMedicoEscolhaMenuActionPerformed
        // atualizar relatório médico
        String patientName = JOptionPane.showInputDialog(rootPane, "Nome do Paciente para ser removido:");
        if(patientName.equals("Roberto")){
            UpdateMedicalRecord updateMedicalRecord = new UpdateMedicalRecord();
            jDesktopPane1.add(updateMedicalRecord);
            updateMedicalRecord.setVisible(true);
        }else{
            JOptionPane.showMessageDialog(rootPane, "Paciente não encontrado", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_atualizarRelatorioMedicoEscolhaMenuActionPerformed

    private void removerRelatorioMedicoEscolhaMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerRelatorioMedicoEscolhaMenuActionPerformed
        // remover relatório médico
        String patientName = JOptionPane.showInputDialog(rootPane, "Nome do Paciente para ser removido:");
        if(patientName.equals("Roberto")){
             JOptionPane.showMessageDialog(rootPane, "Relatório Médico Removido com sucesso", "Remoção", JOptionPane.INFORMATION_MESSAGE);
        }else{
            JOptionPane.showMessageDialog(rootPane, "Paciente não encontrado", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_removerRelatorioMedicoEscolhaMenuActionPerformed

    private void atualizarProntuarioEscolhaMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atualizarProntuarioEscolhaMenuActionPerformed
        //atualizar prontuário
        String patientName = JOptionPane.showInputDialog(rootPane, "Nome do Paciente para ser removido:");
        if(patientName.equals("Roberto")){
            UpdatePatientRecordPage updatePatientRecord = new UpdatePatientRecordPage();
            jDesktopPane1.add(updatePatientRecord);
            updatePatientRecord.setVisible(true);
        }else{
            JOptionPane.showMessageDialog(rootPane, "Paciente não encontrado", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_atualizarProntuarioEscolhaMenuActionPerformed

    private void criarPronturarioEscolhaMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_criarPronturarioEscolhaMenuActionPerformed
        // criar prontuário
       
        
        String searchName = JOptionPane.showInputDialog(rootPane, "Nome do Paciente para ser encontrado:");
        Patient pat = doc.getPatientByName(searchName);
        if(pat != null){
            CreatePatientRecordPage createPatientRecord = new CreatePatientRecordPage(pat);
            jDesktopPane1.add(createPatientRecord);
            createPatientRecord.setVisible(true);
        }else{
            JOptionPane.showMessageDialog(rootPane, "Paciente não encontrado", "Erro", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_criarPronturarioEscolhaMenuActionPerformed

    private void removerProntuarioEscolhaMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerProntuarioEscolhaMenuActionPerformed
        // remover prontuário
        String patientName = JOptionPane.showInputDialog(rootPane, "Nome do Paciente para ser removido:");
        if(patientName.equals("Roberto")){
             JOptionPane.showMessageDialog(rootPane, "Prontuário Removido com sucesso", "Remoção", JOptionPane.INFORMATION_MESSAGE);
        }else{
            JOptionPane.showMessageDialog(rootPane, "Paciente não encontrado", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_removerProntuarioEscolhaMenuActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu agendamentoMenu;
    private javax.swing.JMenuItem atualizarAgendamentoEscolhaMenu;
    private javax.swing.JMenuItem atualizarDadoAdicionalEscolhaMenu;
    private javax.swing.JMenuItem atualizarPacienteEscolhaMenu;
    private javax.swing.JMenuItem atualizarProntuarioEscolhaMenu;
    private javax.swing.JMenuItem atualizarRelatorioMedicoEscolhaMenu;
    private javax.swing.JMenuItem cancelarAgendamentoEscolhaMenu;
    private javax.swing.JMenuItem criarAgendamentoEscolhaMenu;
    private javax.swing.JMenuItem criarDadoAdicionalEscolhaMenu;
    private javax.swing.JMenuItem criarPacienteEscolhaMenu;
    private javax.swing.JMenuItem criarPronturarioEscolhaMenu;
    private javax.swing.JMenuItem criarRelatorioMedicoEscolhaMenu;
    private javax.swing.JMenuItem encontrarPacienteEscolhaMenu;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu medicoMenu;
    private javax.swing.JMenuItem relatorioAgendamentoEscolhaMenu;
    private javax.swing.JMenuItem removerDadoAdcicionalEscolhaMenu;
    private javax.swing.JMenuItem removerPacienteEscolhaMenu;
    private javax.swing.JMenuItem removerProntuarioEscolhaMenu;
    private javax.swing.JMenuItem removerRelatorioMedicoEscolhaMenu;
    private javax.swing.JMenu secretarioMenu;
    // End of variables declaration//GEN-END:variables
}
